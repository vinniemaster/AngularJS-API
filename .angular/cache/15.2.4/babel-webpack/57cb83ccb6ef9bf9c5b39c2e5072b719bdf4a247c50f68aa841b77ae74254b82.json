{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class GithubService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n  }\n  getrepos() {\n    // const headers = new HttpHeaders({\n    //   'UserAgent' : 'request'\n    // })\n    // const requestOptions ={headers: headers};\n    console.log(this.httpClient.get('https://api.github.com/users/vinniemaster/repos').subscribe(data => {\n      let result = JSON.parse(data[\"_body\"]);\n      return result;\n    }));\n  }\n}\nGithubService.ɵfac = function GithubService_Factory(t) {\n  return new (t || GithubService)(i0.ɵɵinject(i1.HttpClient));\n};\nGithubService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: GithubService,\n  factory: GithubService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAMA,OAAM,MAAOA,aAAa;EAExBC,YAAoBC,UAAqB;IAArB,eAAU,GAAVA,UAAU;EAAgB;EAC9CC,QAAQ;IACN;IACA;IACA;IAEA;IAEAC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACH,UAAU,CAACI,GAAG,CAAM,iDAAiD,CAAC,CACtFC,SAAS,CAACC,IAAI,IAAG;MAAE,IAAIC,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACH,IAAI,CAAC,OAAO,CAAC,CAAC;MAAE,OAAOC,MAAM;IAAC,CAAC,CAAC,CAAC;EAC/E;;AAZWT,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;SAAbA,aAAa;EAAAY,SAAbZ,aAAa;EAAAa,YAFZ;AAAM","names":["GithubService","constructor","httpClient","getrepos","console","log","get","subscribe","data","result","JSON","parse","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Vinicius\\Documents\\Angular projects\\API\\API\\src\\app\\services\\github.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GithubService {\n  \n  constructor(private httpClient:HttpClient) {  }\n  getrepos(): any{  \n    // const headers = new HttpHeaders({\n    //   'UserAgent' : 'request'\n    // })\n\n    // const requestOptions ={headers: headers};\n\n    console.log(this.httpClient.get<any>('https://api.github.com/users/vinniemaster/repos')\n    .subscribe(data => {let result = JSON.parse(data[\"_body\"]); return result;}))\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}